pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent {
        docker {
            label 'cloud-governance-worker'
            image 'quay.io/athiru/centos-stream8-podman:latest'
            args  '-u root -v /etc/postfix/main.cf:/etc/postfix/main.cf --privileged'
        }
    }
    environment {
        ACCESS_KEY_APPENG = credentials('appeng-aws-access-key-id')
        SECRET_KEY_APPENG = credentials('appeng-aws-secret-key-id')
        S3_BUCKET_APPENG = credentials('appeng-s3-bucket')
        ACCESS_KEY_FSI_PARTNERS = credentials('appeng-aws-access-key-id')
        SECRET_KEY_FSI_PARTNERS = credentials('appeng-aws-secret-key-id')
        S3_BUCKET_FSI_PARTNERS = credentials('appeng-s3-bucket')
        ACCOUNT_NAME_APPENG = "appeng"
        ACCOUNT_NAME_FSI_PARTNERS = "appeng"
        AWS_IAM_USER_SPREADSHEET_ID = credentials('cloud-governance-aws-iam-user-spreadsheet-id')
        GOOGLE_APPLICATION_CREDENTIALS = credentials('cloud-governance-google-application-credentials')
        LDAP_HOST_NAME = credentials('cloud-governance-ldap-host-name')
        ES_HOST = credentials('haim-cloud-governance-elasticsearch-url')
        ES_PORT = credentials('haim-cloud-governance-elasticsearch-port')
        contact1 = "ebattat@redhat.com"
        contact2 = "athiruma@redhat.com"
    }
    stages {
        stage('Checkout') { // Checkout (git clone ...) the projects repository
           steps {
                 checkout scm
           }
        }
        stage('Initial Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null); fi'''
            }
        }
        stage('Run Policies the Cost Policies') {
            steps {
                 sh 'echo "Hello World"'
            }
        }
        stage('Run Policies the Daily polices') {
            steps {
                 script {
                    def account = ['APPENG']
                    for (int i = 0; i < account.size(); ++i) {
                        echo "Testing the ACCESS_KEY_${account[i]} browser"
                        env.ACCESS_KEY = 'env.${account[i]}_ACCESS_KEY'
                        env.SECRET_KEY = "env.${account[i]}_SECRET_KEY"
                        env.S3_BUCKET = "env.${account[i]}_S3_BUCKET"
                        env.ACCOUNT_NAME = "${account[i]}"
                        sh 'echo $ACCESS_KEY'
                    }
                }
            }
        }
        stage('Finalize Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null); fi'''
                 deleteDir()
            }
        }
    }
    post {
        failure {
              script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
            Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
            """,subject: msg, to: "${contact1}, ${contact2}, ${contact3}"
            }
          }
    }
}
